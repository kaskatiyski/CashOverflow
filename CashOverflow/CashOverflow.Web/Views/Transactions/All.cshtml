@model CashOverflow.Web.ViewModels.Transaction.AllTransactionsViewModel

@using CashOverflow.Models.Enum
@using CashOverflow.Web.ViewModels.Partial

@{
    ViewData["Title"] = "All";

    var allTransactions = Model.Transactions.SelectMany(group => group);

    var expenses = allTransactions.Where(x => x.Category.Type == CategoryType.Expense).GroupBy(x => x.Category.Name);

    var income = allTransactions.Where(x => x.Category.Type == CategoryType.Income).GroupBy(x => x.Category.Name);
}

@await Html.PartialAsync("_DeleteAskPartial")
@await Html.PartialAsync("_PeriodPickerPartial", Url.Action(""))

<div class="page-title-wrapper row align-items-center">
    <div class="page-title col">
        <div class="page-maintitle">
            Transactions
        </div>
        <div class="page-subtitle">
        </div>
    </div>
    <div class="page-title-actions col-auto">
        <button type="button" class="btn btn-sm btn-accent" data-toggle="modal" data-target="#periodPicker" data-direction='bottom'>Period</button>
    </div>
    <div class="col-12">
        @ViewData["Period"].ToString()
    </div>
</div>

<a asp-action="Create" class="btn btn-float btn-accent btn-circle">
    <i class="fas fa-plus"></i>
</a>


@if (Model.Transactions.Count() > 0)
{
    <div class="row">
        <div class="col-12 col-md-6">
            <div class="co-card">
                <div class="co-card-header">
                    <div class="co-card-title">
                        <div class="co-card-title-subtitle">Income</div>
                    </div>
                </div>
                <div class="co-card-body" style="height: 430px;">
                    <div>
                        @if (income.Count() > 0)
                        {
                            <canvas id="chartIncome" width="400" height="400"></canvas>
                        }
                        else
                        {
                            <div class="no-data">
                                You have no income fort this month yet.
                            </div>
                        }
                    </div>
                </div>
            </div>
        </div>

        <div class="col-12 col-md-6">
            <div class="co-card">
                <div class="co-card-header">
                    <div class="co-card-title">
                        <div class="co-card-title-subtitle">Expenses</div>
                    </div>
                </div>
                <div class="co-card-body" style="height: 430px;">
                    <div>
                        @if (expenses.Count() > 0)
                        {
                            <canvas id="chartExpense" width="400" height="400"></canvas>
                        }
                        else
                        {
                            <div class="no-data">
                                You have no expenses fort this month yet.
                            </div>
                        }
                    </div>
                </div>
            </div>
        </div>
    </div>

    @await Html.PartialAsync("_TransactionsListPartial", new TransactionListViewModel() { Transactions = Model.Transactions })
}
else
{
    <div class="no-data">
        <div>
            <div>
                There are no transactions for the selected period.
            </div>
            <div>
                Make sure to <a asp-controller="Categories" asp-action="Create">create a category</a>, before adding a your first transaction.
            </div>
        </div>
        @*<img src="https://image.freepik.com/free-photo/close-up-man-suit-holding-empty-purse_85574-11976.jpg" alt="Alternate Text" />*@
    </div>
}



<script>

    let expenses = {};
    let income = {};

    @{

        foreach (var group in expenses)
        {
            @:expenses['@group.Key'] = @group.Sum(x => x.Ammount);
        }

        foreach (var group in income)
        {
            @:income['@group.Key'] = @group.Sum(x => x.Ammount);
        }
    }

    let chartOptions = {
        type: 'doughnut',
        options: {
            responsive: true,
            maintainAspectRatio: false,
            tooltips: {
                backgroundColor: "rgb(255,255,255)",
                bodyFontColor: "#858796",
                borderColor: '#dddfeb',
                borderWidth: 1,
                xPadding: 15,
                yPadding: 15,
                displayColors: false,
                caretPadding: 10,
            },
            scales: {
                xAxes: [{
                    display: false
                }],
                yAxes: [{
                    display: false
                }],
            }
        }
    }

    let dataIncome = Object.values(income).sort(function(a, b){return a - b}).reverse();
    let keysIncome = Object.keys(income).sort(function(a,b){return income[a]-income[b]}).reverse();

    let dataExpenses = Object.values(expenses).sort(function(a, b){return a - b}).reverse();
    let keysExpenses = Object.keys(expenses).sort(function(a,b){return expenses[a]-expenses[b]}).reverse();

    let incomeChartElement = $('#chartIncome');
    let incomeChart = new Chart(incomeChartElement, {

        data: {
            labels: keysIncome,
            datasets: [{
                label: 'Income',
                data: dataIncome,
                backgroundColor: [
              '#264653','#2A9D8F','#E9C46A','#F4A261','#E76F51','#264653','#2A9D8F','#E9C46A','#F4A261','#E76F51','#264653','#2A9D8F','#E9C46A','#F4A261','#E76F51',
                ],
            }],
        },
        ...chartOptions
    });

    let expenseChartElement = $('#chartExpense');
    let expenseChart = new Chart(expenseChartElement, {
        data: {
            labels: keysExpenses,
            datasets: [{
                label: 'Expenses',
                data: dataExpenses,
                backgroundColor: [
                    '#ff6666','#ffa366','#ffe966','#abff66','#66ffee','#66adff','#a566ff','#ff66ef','#ff6666','#ffa366','#ffe966','#abff66','#66ffee','#66adff','#a566ff','#ff66ef','#ff6666','#ffa366','#ffe966','#abff66','#66ffee','#66adff','#a566ff','#ff66ef',
                ],
            }],
        },
        ...chartOptions
    });

</script>