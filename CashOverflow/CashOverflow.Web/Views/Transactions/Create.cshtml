@model CashOverflow.Web.ViewModels.Transaction.CreateTransactionInputModel

@using CashOverflow.Models;
@using CashOverflow.Models.Enum;
@using CashOverflow.Web.ViewModels.Transaction

@{
    ViewData["Title"] = "Create";
    // TODO: Check if there is another way to do this
    CreateTransactionViewModel categories = this.ViewData["Categories"] as CreateTransactionViewModel;
}

@section scripts{
    @await Html.PartialAsync("_ValidationScriptsPartial")
}

<style>

    .input-amount {
        border: none;
        box-shadow: none !important;
        background: none !important;
        font-size: 2.5rem;
        font-weight: 100;
        padding-left: 0;
    }

    .input-hidden {
        display: none;
    }

    .input-wrapper {
        background: white;
        margin: 0.7rem 0;
        box-shadow: 0 1px 2px rgba(0,0,0,.05);
        /*padding: 0.75rem 1.25rem;*/
    }

    .input-header {
        display: flex;
        align-items: center;
        padding: 0.75rem 1.25rem;
        cursor: pointer;
    }

    .input-header-non-interactive {
        display: block;
        cursor: initial;
    }

    .input-header-arrow {
        margin-left: auto;
    }

    .input-header-title {
        font-size: 0.85rem;
    }

    .input-body {
        padding: 0.75rem 1.25rem;
    }


    .category-list {
    }

    .category-list-hidden {
        display: none;
    }

    .category-item-wrapper {
        padding: 0.1rem;
    }

    .category-item {
        text-align: center;
        padding: 0.5rem 0;
        border: 1px solid #ededed;
        border-bottom: 3px solid #d9d9d9;
        border-radius: 6px;
        background: #fcfcfc;
        cursor: pointer;
    }

        .category-item:hover {
            background: #f4f4f4;
        }



    .switch-group {
        margin: auto;
        font-size: 1em;
        height: 2em;
        line-height: 2em;
        border-radius: 0.3em;
        background: #ccc;
        position: relative;
        display: flex;
        flex: 1;
    }

    .switch {
        text-align: center;
        cursor: pointer;
        position: relative;
        display: block;
        -webkit-transition: 300ms ease-out;
        -moz-transition: 300ms ease-out;
        transition: 300ms ease-out;
        padding: 0 1em;
        flex: 1;
    }

    .switch-selector {
        text-align: center;
        position: absolute;
        width: 0;
        box-sizing: border-box;
        -webkit-transition: 300ms ease-out;
        -moz-transition: 300ms ease-out;
        transition: 300ms ease-out;
        border-radius: 0.3em;
        color: white;
        -moz-box-shadow: 0px 2px 4px 0px #9b9b9b;
        -webkit-box-shadow: 0px 2px 4px 0px #9b9b9b;
        -o-box-shadow: 0px 2px 4px 0px #9b9b9b;
        box-shadow: 0px 2px 4px 0px #9b9b9b;
        filter: progid:DXImageTransform.Microsoft.Shadow(color=#9b9b9b, Direction=180, Strength=4);
    }

    #categorySwitch .Income {
        background: #28a745;
    }

    #categorySwitch .Expense {
        background: #dc3545;
    }

    #categorySwitch .Transfer {
        background: #6c757d;
    }
</style>

<h1>Create</h1>

<h4>Transaction</h4>

<hr />

<div class="row">
    <div class="col-sm-6 col-12">
        <form asp-action="Create">

            <input id="inputCategoryId" type="hidden" asp-for="CategoryId" />

            <div class="custom-card">
                <div class="custom-card-header" id="categoryHeading" data-toggle="collapse" data-target="#caregoryWrapper" aria-expanded="true" aria-controls="caregoryWrapper">
                    <div class="custom-card-header-title">
                        <div class="custom-card-header-subtitle ">Category: </div>
                        <div class="custom-card-header-maintitle regular" id="inputCategoryLabel">Choose a category</div>
                    </div>
                    <div class="input-header-arrow">
                        <i class="fas fa-chevron-down"></i>
                    </div>
                </div>
                <div id="caregoryWrapper" class="collapse show" aria-labelledby="categoryHeading">
                    <div class="custom-card-body text-center">
                        <div id="categorySwitch" class="switch-group mb-3">
                            <div id="categorySwitchIncome" class="switch" onclick="changeType('Income')">Income</div>
                            <div id="categorySwitchExpense" class="switch" onclick="changeType('Expense')">Expense</div>
                            <div id="categorySwitchTransfer" class="switch" onclick="changeType('Transfer')">Transfer</div>
                            <div id="categorySwitchSelector" class="switch-selector"></div>
                        </div>
                        <div id="expenseCategoriesList" class="category-list category-list-hidden row m-0">
                            @foreach (var category in categories.Categories.Where(x => x.Type == CategoryType.Expense))
                            {
                                <div class="category-item-wrapper col-4">
                                    <div class="category-item " onclick="setCategoryId('@category.Id', '@category.Name')">@category.Name</div>
                                </div>
                            }
                        </div>
                        <div id="incomeCategoriesList" class="category-list category-list-hidden row m-0">
                            @foreach (var category in categories.Categories.Where(x => x.Type == CategoryType.Income))
                            {
                                <div class="category-item-wrapper col-4">
                                    <div class="category-item " onclick="setCategoryId('@category.Id', '@category.Name')">@category.Name</div>
                                </div>
                            }
                        </div>
                        <div id="transferCategoriesList" class="category-list category-list-hidden row m-0 fs-9 font-weight-bolder">
                            TODO
                        </div>
                    </div>
                </div>
            </div>

            <div class="custom-card">
                <div class="custom-card-header" id="dateHeading" data-toggle="collapse" data-target="#dateWrapper" aria-expanded="false" aria-controls="dateWrapper">
                    <div class="custom-card-header-title">
                        <div class="custom-card-header-subtitle ">Date: </div>
                        <div class="custom-card-header-maintitle regular" id="inputDateLabel">@DateTime.UtcNow.ToString("dd MMM yyyy")</div>
                    </div>
                    <div class="input-header-arrow">
                        <i class="fas fa-chevron-down"></i>
                    </div>
                </div>
                <div id="dateWrapper" class="collapse" aria-labelledby="dateHeading">
                    <div class="custom-card-body">
                        <div class="form-group">
                            @*<label asp-for="Date" class="control-label"></label>*@
                            <div id="inputDatepicker"></div>
                            <input id="inputDate" asp-for="Date" type="hidden" class="form-control" />
                            <span asp-validation-for="Date" class="text-danger"></span>
                        </div>
                    </div>
                </div>
            </div>

            @* Ammount *@
            <div class="custom-card">
                <div asp-validation-summary="ModelOnly" class="text-danger"></div>
                <div class="input-header input-header-non-interactive">
                    @*<label asp-for="Ammount" class="control-label"></label>*@
                    <div class="d-flex justify-content-center align-items-baseline">
                        <input asp-for="Ammount" type="text" inputmode="numeric" class="form-control input-amount" id="inputAmount" placeholder="00,00" />
                        <span class="input-amount">BGN</span>
                    </div>
                    <span asp-validation-for="Ammount" class="text-danger"></span>
                </div>
            </div>

            @* Recipient *@
            <div class="custom-card">
                <div class="custom-card-header custom-card-header-non-interactive">
                    <div class="custom-card-header-title">
                        <div class="custom-card-header-subtitle ">Recipient:</div>
                        <input asp-for="Recipient" class="form-control" />
                        <span asp-validation-for="Recipient" class="text-danger"></span>
                    </div>
                </div>
            </div>

            @* Notes *@
            <div class="custom-card">
                <div class="custom-card-header custom-card-header-non-interactive">
                    <div class="custom-card-header-title">
                        <div class="custom-card-header-subtitle ">Notes:</div>
                        <input asp-for="Notes" class="form-control" />
                        <span asp-validation-for="Notes" class="text-danger"></span>
                    </div>
                </div>
            </div>

            @* Location *@
            <div class="custom-card">
                <div class="custom-card-header custom-card-header-non-interactive">
                    <div class="custom-card-header-title">
                        <div class="custom-card-header-subtitle ">Location:</div>
                        <div id="inputLocationName" class="">&nbsp;</div>
                        <div id="inputLocationAddress" class="fs-2">&nbsp;</div>

                        <input type="hidden" id="name" asp-for="Location.Name" class="form-control form-control-new" />
                        <input type="hidden" id="addr" asp-for="Location.Address" class="form-control form-control-new" />
                        <input type="hidden" id="plid" asp-for="Location.PlaceId" class="form-control form-control-new" />
                        <input type="hidden" id="lat" asp-for="Location.Latitude" class="form-control form-control-new" />
                        <input type="hidden" id="lng" asp-for="Location.Longitude" class="form-control form-control-new" />
                    </div>
                </div>
            </div>

            <div class="form-group">
                <input type="submit" value="Create" class="btn btn-primary" />
            </div>
        </form>
    </div>

    <div class="col-sm-6 col-12 custom-card-header-title">
        <input id="placeSearchBox" class="controls form-control px-3" type="text" placeholder="Search for a place...">
        <div id="map"></div>
    </div>

</div>






<style>

    #map {
        width: 100%;
        height: 535px;
        background-color: grey;
    }

    #placeSearchBox {
        margin: 1rem 0;
        width: 100%;
    }
</style>



<script>
    let map;

    // Initialize and add the map
    function initMap() {

        //The center location of our map.
        let uluru = { lat: 42.695566, lng: 23.322510 };

        let mapOptions = {
            draggableCursor: 'default',
            //draggingCursor: 'pointer',
        };

        let map = new google.maps.Map(document.getElementById('map'), {
            zoom: 14,
            center: uluru,
            ...mapOptions
        });

        let service = new google.maps.places.PlacesService(map);
        let infowindow = new google.maps.InfoWindow();

        // Create the search box and link it to the UI element.
        let input = document.getElementById('placeSearchBox');
        let searchBox = new google.maps.places.SearchBox(input);
        //map.controls[google.maps.ControlPosition.TOP_LEFT].push(input);

        // Bias the SearchBox results towards current map's viewport.
        map.addListener('bounds_changed', function () {
            searchBox.setBounds(map.getBounds());
        });

        let markers = [];
        let clickMarker;

        function clearMarkers() {
            markers.forEach(function (marker) {
                marker.setMap(null);
            });
            markers = [];
        }

        function clearClickMarker() {
            if (clickMarker) {
                clickMarker.setMap(null);
                clickMarker = null;
            }
        }
        // Listen for the event fired when the user selects a prediction and retrieve more details for that place.
        searchBox.addListener('places_changed', function () {
            var places = searchBox.getPlaces();

            if (places.length == 0) {
                return;
            }

            if (places.length == 1) {
                getDetails({ placeId: places[0].place_id, latLng: places[0].geometry.location });
            }

            // Clear out the old markers.
            clearMarkers();

            // For each place, get the icon, name and location.
            let bounds = new google.maps.LatLngBounds();
            places.forEach(function (place) {
                if (!place.geometry) {
                    console.log("Returned place contains no geometry");
                    return;
                }

                //var icon = {
                //  url: 'http://ivanpetrov.eu/el/pin-red.png',
                //  size: new google.maps.Size(71, 71),
                //  origin: new google.maps.Point(0, 0),
                //  anchor: new google.maps.Point(17, 34),
                //  scaledSize: new google.maps.Size(25, 25)
                //};

                // Create a marker for each place.
                var marker = new google.maps.Marker({
                    map: map,
                    //icon: icon,
                    title: place.name,
                    position: place.geometry.location
                });

                marker.addListener('click', function () {
                    getDetails({ placeId: place.place_id, latLng: place.geometry.location });
                })

                markers.push(marker);

                if (place.geometry.viewport) {
                    // Only geocodes have viewport.
                    bounds.union(place.geometry.viewport);
                } else {
                    bounds.extend(place.geometry.location);
                }
            });
            map.fitBounds(bounds);
        });


        google.maps.event.addListener(map, 'click', function (event) {
            event.stop();

            if (event.placeId) {
                clearMarkers();
                getDetails({ placeId: event.placeId, latLng: event.latLng });
            }
        });

        function getDetails(request) {
            clearClickMarker();

            if (request.placeId) {
                service.getDetails({
                    placeId: request.placeId
                }, function (result, status) {

                    if (status === google.maps.places.PlacesServiceStatus.OK) {
                        //var icon = {
                        //  url: 'http://ivanpetrov.eu/el/pin-green.png',
                        //  size: new google.maps.Size(71, 71),
                        //  origin: new google.maps.Point(0, 0),
                        //  anchor: new google.maps.Point(17, 34),
                        //  scaledSize: new google.maps.Size(25, 25)
                        //};

                        let marker = new google.maps.Marker({
                            //icon: icon,
                            map: map,
                            position: result.geometry.location
                        });

                        clickMarker = marker;

                        infowindow.setContent('<div style="font-size: 15px;"><strong>' + result.name + '</strong></div>' + result.formatted_address + '</div>');
                        infowindow.open(map, marker);
                    }

                    document.getElementById('name').value = result.name;
                    document.getElementById('addr').value = result.formatted_address;
                    document.getElementById('plid').value = result.place_id;
                    document.getElementById('lat').value = request.latLng.lat();
                    document.getElementById('lng').value = request.latLng.lng();

                    document.getElementById('inputLocationName').innerHTML = result.name;
                    document.getElementById('inputLocationAddress').innerHTML = result.formatted_address;

                    //document.getElementById('placeSearchBox').value = result.formatted_address;


                });
            }
        }

        // Try HTML5 geolocation.
        if (navigator.geolocation) {
            navigator.geolocation.getCurrentPosition(function (position) {
                var pos = {
                    lat: position.coords.latitude,
                    lng: position.coords.longitude
                };
                map.setCenter(pos);
            });
        }
    }
</script>

<script>

    // Amount input field formatting

    let oldValue;

    $(document).ready(function () {

        let initializeCurrencyInput = function (el) {

            el.on('keyup', function () {
                let element = $(this);
                let val = element.val().replace(/\s/g, '');

                if (!/^\d*([.,]\d{0,2})?$/.test(val)) {
                    element.val(oldValue);
                    val = oldValue;
                }

                if (val.includes(',')) {
                    val = val.replace(',', '.');
                }

                if (val[0] == ',') {
                    val = "0" + val;
                }

                element.val(val.replace(/(\d)(?=(\d{3})+(?!\d))/g, '$1 '));

                oldValue = val;
            });

        }

        oldValue = $('#inputAmount').val();
        initializeCurrencyInput($('#inputAmount'));

    });


    let flag = {
        category: false,
        datepicker: false
    };

    // Change transaction type

    function changeType(type) {
        var income = document.getElementById("categorySwitchIncome");
        var expense = document.getElementById("categorySwitchExpense");
        var transfer = document.getElementById("categorySwitchTransfer");
        var selector = document.getElementById("categorySwitchSelector");

        let incomeCategoriesList = $('#incomeCategoriesList');
        let expenseCategoriesList = $('#expenseCategoriesList');
        let transferCategoriesList = $('#transferCategoriesList');

        switch (type) {
            case '@CategoryType.Expense':
                selector.style.left = income.clientWidth + "px";
                selector.style.width = expense.clientWidth + "px";

                //inputIncomeCategories.addClass('input-hidden');
                //inputExpenseCategories.removeClass('input-hidden');
                incomeCategoriesList.addClass('category-list-hidden');
                expenseCategoriesList.removeClass('category-list-hidden');
                transferCategoriesList.addClass('category-list-hidden');
                $("#@CategoryType.Expense").prop("checked", true);
                $("#@CategoryType.Income").prop("checked", false);
                $("#@CategoryType.Transfer").prop("checked", false);
                break;
            case '@CategoryType.Income':
                selector.style.left = 0;
                selector.style.width = income.clientWidth + "px";

                //inputIncomeCategories.removeClass('input-hidden');
                //inputExpenseCategories.addClass('input-hidden');
                incomeCategoriesList.removeClass('category-list-hidden');
                expenseCategoriesList.addClass('category-list-hidden');
                transferCategoriesList.addClass('category-list-hidden');
                $("#@CategoryType.Income").prop("checked", true);
                $("#@CategoryType.Expense").prop("checked", false);
                $("#@CategoryType.Transfer").prop("checked", false);

                break;
            case '@CategoryType.Transfer':
            default:
                selector.style.left = income.clientWidth + expense.clientWidth + 1 + "px";
                selector.style.width = transfer.clientWidth + "px";

                incomeCategoriesList.addClass('category-list-hidden');
                expenseCategoriesList.addClass('category-list-hidden');
                transferCategoriesList.removeClass('category-list-hidden');
                $("#@CategoryType.Income").prop("checked", false);
                $("#@CategoryType.Expense").prop("checked", false);
                $("#@CategoryType.Transfer").prop("checked", true);
        }

        selector.innerHTML = type;
        selector.classList.remove('Income', 'Expense', 'Transfer');
        selector.classList.add(type);
    }

    @*$(document).ready(function () {
        changeType('@CategoryType.Expense');
    });*@

    function setCategoryId(id, name) {
        $('#inputCategoryId').val(id);
        $('#inputCategoryLabel').text(name);
        if (!flag.category) {
            $('#caregoryWrapper').collapse('hide');
            $('#dateWrapper').collapse('show');
            flag.category = true;
        }
    }


    let options = {
        language: 'en',
        dateFormat: 'yyyy-mm-dd',
        inline: true,
        //inline: true,
        onSelect: function (formattedDate, date) {
            $('#inputDateLabel').text(moment(date).format("DD MMM YYYY"));
            $('#inputDate').val(formattedDate);
            if (!flag.datepicker) {
                $('#dateWrapper').collapse('hide');
                $('#inputAmount').focus();
                flag.datepicker = true;
            }
        }
    };

    $('#inputDatepicker').datepicker(options);

    $(document).ready(function () {

        // Set date field to today's date
        document.getElementById('inputDate').value = moment().format('YYYY-MM-DD');

    });

</script>
